{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../../src/constants/playerStates.ts","../../src/MediaControls.style.ts","../../src/utils.ts","../../src/Controls.tsx","../../src/Slider.tsx","../../src/MediaControls.tsx","../../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0.4)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.5)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: containerBackgroundColor,\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 3,\n    borderWidth: 1.5,\n    height: 50,\n    justifyContent: \"center\",\n    width: 50,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 50,\n    borderWidth: 3,\n    height: 20,\n    width: 20,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n});\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date();\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls: React.FC<ControlsProps> = props => {\n  const { isLoading, mainColor, playerState, onReplay, onPause } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton, { backgroundColor: mainColor }]}\n      onPress={pressAction}\n    >\n      <Image source={icon} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport { TouchableOpacity, View, Text, Image } from \"react-native\";\nimport RNSlider from \"react-native-slider\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype SliderProps = Pick<\n  Props,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider: React.FC<SliderProps> = props => {\n  const { progress, duration, mainColor, onFullScreen, onPause } = props;\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View style={[styles.controlsRow, styles.progressContainer]}>\n      <View style={styles.progressColumnContainer}>\n        <View style={[styles.timerLabelsContainer]}>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(progress)}\n          </Text>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(duration)}\n          </Text>\n        </View>\n        <RNSlider\n          style={styles.progressSlider}\n          onValueChange={dragging}\n          onSlidingComplete={seekVideo}\n          maximumValue={Math.floor(duration)}\n          value={Math.floor(progress)}\n          trackStyle={styles.track}\n          thumbStyle={[styles.thumb, { borderColor: mainColor }]}\n          minimumTrackTintColor={mainColor}\n        />\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useState } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\ninterface MediaControlsComposition {\n  Toolbar: React.FC;\n}\n\nexport type Props = {\n  mainColor: string;\n  isLoading: boolean;\n  progress: number;\n  duration: number;\n  isFullScreen: boolean;\n  playerState: PLAYER_STATES;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  fadeOutDelay?: number;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n};\n\nconst MediaControls: React.FC<Props> & MediaControlsComposition = props => {\n  const {\n    children,\n    duration,\n    isLoading = false,\n    onFullScreen,\n    playerState,\n    progress,\n    onReplay: onReplayCallback,\n    fadeOutDelay = 5000,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onSeeking,\n    onSeek,\n  } = props;\n  const [opacity] = useState(new Animated.Value(1));\n  const [isVisible, setIsVisible] = useState(true);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState, onPaused } = props;\n    const { PLAYING, PAUSED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      default:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={toggleControls}>\n      <Animated.View style={[styles.container, { opacity }]}>\n        {isVisible && (\n          <View style={styles.container}>\n            <View style={[styles.controlsRow, styles.toolbarRow]}>\n              {children}\n            </View>\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n            />\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n            />\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\nconst Toolbar: React.FC = ({ children }) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","playIcon","resizeMode","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","thumb","timeRow","timerLabel","color","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","isLoading","mainColor","playerState","onReplay","onPause","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","Image","source","View","fullScreenImage","Slider","progress","duration","onFullScreen","Text","RNSlider","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","trackStyle","thumbStyle","minimumTrackTintColor","Boolean","MediaControls","children","onReplayCallback","fadeOutDelay","opacity","useState","Animated","Value","setIsVisible","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","onPaused","stopAnimation","TouchableWithoutFeedback","loop","Toolbar"],"mappings":"8IAAKA,4FCMUC,aAAWC,OAAO,CAC/BC,UAAW,CACTC,WAAY,SACZC,gBAP6B,wBAQ7BC,OAAQ,EACRC,KAAM,EACNC,cAAe,SACfC,eAAgB,gBAChBC,KAAM,EACNC,kBAAmB,GACnBC,gBAAiB,GACjBC,SAAU,WACVC,MAAO,EACPC,IAAK,GAEPC,YAAa,CACXZ,WAAY,SACZa,UAAW,UACXV,KAAM,EACNE,eAAgB,UAElBS,oBAAqB,CACnBd,WAAY,SACZa,UAAW,UACXR,eAAgB,SAChBU,YAAa,IAEfC,WAAY,CACVhB,WAAY,SACZiB,YAhC0B,wBAiC1BC,aAAc,EACdC,YAAa,IACbC,OAAQ,GACRf,eAAgB,SAChBgB,MAAO,IAETC,SAAU,CACRF,OAAQ,GACRG,WAAY,UACZF,MAAO,IAETG,wBAAyB,CACvBrB,KAAM,GAERsB,kBAAmB,CACjBrB,cAAe,MACfC,eAAgB,WAChBqB,cAAe,IAEjBC,eAAgB,CACdd,UAAW,WAEbe,WAAY,CACVR,OAAQ,GACRG,WAAY,UACZF,MAAO,IAETQ,MAAO,CACL5B,gBA5DU,OA6DViB,aAAc,GACdC,YAAa,EACbC,OAAQ,GACRC,MAAO,IAETS,QAAS,CACPjB,UAAW,WAEbkB,WAAY,CACVC,MAtEU,OAuEVC,SAAU,IAEZC,qBAAsB,CACpBrB,UAAW,UACXT,cAAe,MACfC,eAAgB,gBAChBqB,cAAe,GAEjBS,QAAS,CACP/B,cAAe,MACfD,KAAM,EACNE,eAAgB,YAElB+B,WAAY,CACVpC,WAAY,aACZI,cAAe,MACfC,eAAgB,cAElBgC,MAAO,CACLnB,aAAc,EACdE,OAAQ,MD/FPxB,EAAAA,wBAAAA,kDAEHA,uBACAA,qBEDK,IAAM0C,EAAwB,SAACC,SACfA,GAAW,KAAO,CAAC,GAAI,GAAK,CAAC,GAAI,GAA/CC,OAAOC,OACRC,EAAO,IAAIC,YAEjBD,EAAKE,WAAWL,GACTG,EAAKG,cAAcC,OAAON,EAAOC,ICOpCM,EAAoC,SAAAC,OAChCC,EAAyDD,EAAzDC,UAAWC,EAA8CF,EAA9CE,UAAWC,EAAmCH,EAAnCG,YAAaC,EAAsBJ,EAAtBI,SAAUC,EAAYL,EAAZK,QAC/CC,EDJ0B,SAACH,UACzBA,QACDvD,sBAAc2D,cACVC,QAAQ,6BACZ5D,sBAAc6D,eACVD,QAAQ,8BACZ5D,sBAAc8D,aACVF,QAAQ,yCAER,MCLEG,CAAmBR,GAC1BS,EAAcT,IAAgBvD,sBAAc8D,MAAQN,EAAWC,EAE/DQ,EAAUZ,EACda,gBAACC,qBAAkBC,KAAK,QAAQhC,MAAM,SAEtC8B,gBAACG,oBACCC,MAAO,CAACC,EAAOnD,WAAY,CAAEf,gBAAiBiD,IAC9CkB,QAASR,GAETE,gBAACO,SAAMC,OAAQhB,EAAMY,MAAOC,EAAO7C,mBAIhCwC,gBAACS,QAAKL,MAAO,CAACC,EAAOvD,cAAeiD,ICTvCW,EAAkBhB,QAAQ,8BAE1BiB,EAAgC,SAAAzB,OAC5B0B,EAAyD1B,EAAzD0B,SAAUC,EAA+C3B,EAA/C2B,SAAUzB,EAAqCF,EAArCE,UAAW0B,EAA0B5B,EAA1B4B,aAAcvB,EAAYL,EAAZK,eAmBnDS,gBAACS,QAAKL,MAAO,CAACC,EAAOvD,YAAauD,EAAO1C,oBACvCqC,gBAACS,QAAKL,MAAOC,EAAO3C,yBAClBsC,gBAACS,QAAKL,MAAO,CAACC,EAAOjC,uBACnB4B,gBAACe,QAAKX,MAAOC,EAAOpC,YACjBO,EAAsBoC,IAEzBZ,gBAACe,QAAKX,MAAOC,EAAOpC,YACjBO,EAAsBqC,KAG3Bb,gBAACgB,GACCZ,MAAOC,EAAOxC,eACdoD,cA7BS,SAACC,OACG7B,EAAgBH,EAAhBG,aACnB8B,EADmCjC,EAA3BiC,WACED,GAEN7B,IAAgBvD,sBAAc2D,QAIlCF,KAsBM6B,kBAnBU,SAACF,GACjBhC,EAAMmC,OAAOH,GACb3B,KAkBM+B,aAAcC,KAAKC,MAAMX,GACzBK,MAAOK,KAAKC,MAAMZ,GAClBa,WAAYpB,EAAO9B,MACnBmD,WAAY,CAACrB,EAAOtC,MAAO,CAAEZ,YAAaiC,IAC1CuC,sBAAuBvC,KAG1BwC,QAAQd,IACPd,gBAACG,oBACCC,MAAOC,EAAOrD,oBACdsD,QAASQ,GAETd,gBAACO,SAAMC,OAAQE,OCrCnBmB,EAA4D,SAAA3C,OAE9D4C,EAWE5C,EAXF4C,SACAjB,EAUE3B,EAVF2B,WAUE3B,EATFC,UAAAA,gBACA2B,EAQE5B,EARF4B,aACAzB,EAOEH,EAPFG,YACAuB,EAME1B,EANF0B,SACUmB,EAKR7C,EALFI,WAKEJ,EAJF8C,aAAAA,aAAe,QAIb9C,EAHFE,UAAAA,aAAY,2BACZ+B,EAEEjC,EAFFiC,UACAE,EACEnC,EADFmC,OAEKY,EAAWC,WAAS,IAAIC,WAASC,MAAM,SACZF,YAAS,GAAzBG,OAEZC,EAAkB,SAACC,YAAAA,IAAAA,EAAQ,GAC/BJ,WAASK,OAAOP,EAAS,CACvBQ,QAAS,EACT5B,SAAU,IACV0B,MAAAA,EACAG,iBAAiB,IAChBC,OAAM,SAAAC,GAGHA,EAAOC,UACTR,GAAa,OA0Bb9C,EAAU,eACNF,EAA0BH,EAA1BG,YAAayD,EAAa5D,EAAb4D,SACbnD,EAAoB7D,sBAApB6D,QAASF,EAAW3D,sBAAX2D,cACTJ,QACDM,EANqBsC,EAAQc,eAAc,kBAAMV,GAAa,iBAU9D5C,EACH6C,EAAgBN,UAQbc,EADgBzD,IAAgBM,EAAUF,EAASE,WAc1DK,gBAACgD,4BAAyB1C,QAVL,WAGrB2B,EAAQc,eAAc,SAAC7B,UACrBmB,IAAenB,GACRA,EAAQoB,cA9CKW,IAAAA,GAAO,GAC7BZ,GAAa,QACbF,WAASK,OAAOP,EAAS,CACvBQ,QAAS,EACT5B,SAAU,IACV0B,MAAO,EACPG,iBAAiB,IAChBC,OAAM,WACHM,GACFX,EAAgBN,OATC,IAACiB,OAoDpBjD,gBAACmC,WAAS1B,MAAKL,MAAO,CAACC,EAAOpE,UAAW,CAAEgG,QAAAA,WAEvCjC,gBAACS,QAAKL,MAAOC,EAAOpE,WAClB+D,gBAACS,QAAKL,MAAO,CAACC,EAAOvD,YAAauD,EAAO/B,aACtCwD,GAEH9B,gBAACf,GACCM,QAASA,EACTD,SA9CK,WACfgD,EAAgBN,GAChBD,KA6CU5C,UAAWA,EACXC,UAAWA,EACXC,YAAaA,IAEfW,gBAACW,GACCC,SAAUA,EACVC,SAAUA,EACVzB,UAAWA,EACX0B,aAAcA,EACdzB,YAAaA,EACbgC,OAAQA,EACRF,UAAWA,EACX5B,QAASA,QASvBsC,EAAcqB,QChJY,mBAAkBlD,kCAAf8B"}